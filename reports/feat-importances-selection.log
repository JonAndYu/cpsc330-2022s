Traceback (most recent call last):
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/kvarada/opt/miniconda3/envs/cpsc330/lib/python3.9/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
delta = scaler.inverse_transform(np.ones(len(numeric_features))) - scaler.inverse_transform(np.zeros(len(numeric_features)))
lr_scales = pd.DataFrame(data=delta, index=numeric_features, columns=["Scale"])
lr_scales.head()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/var/folders/80/kr9rkqfj4w78h49djkz8yy9r0000gp/T/ipykernel_12145/313988355.py[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mdelta[0m [0;34m=[0m [0mscaler[0m[0;34m.[0m[0minverse_transform[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mones[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mnumeric_features[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m [0;34m-[0m [0mscaler[0m[0;34m.[0m[0minverse_transform[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mzeros[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mnumeric_features[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mlr_scales[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m([0m[0mdata[0m[0;34m=[0m[0mdelta[0m[0;34m,[0m [0mindex[0m[0;34m=[0m[0mnumeric_features[0m[0;34m,[0m [0mcolumns[0m[0;34m=[0m[0;34m[[0m[0;34m"Scale"[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0mlr_scales[0m[0;34m.[0m[0mhead[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/envs/571/lib/python3.9/site-packages/sklearn/preprocessing/_data.py[0m in [0;36minverse_transform[0;34m(self, X, copy)[0m
[1;32m   1014[0m [0;34m[0m[0m
[1;32m   1015[0m         [0mcopy[0m [0;34m=[0m [0mcopy[0m [0;32mif[0m [0mcopy[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m [0;32melse[0m [0mself[0m[0;34m.[0m[0mcopy[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1016[0;31m         X = check_array(
[0m[1;32m   1017[0m             [0mX[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1018[0m             [0maccept_sparse[0m[0;34m=[0m[0;34m"csr"[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/miniconda3/envs/571/lib/python3.9/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)[0m
[1;32m    759[0m             [0;31m# If input is 1D raise error[0m[0;34m[0m[0;34m[0m[0m
[1;32m    760[0m             [0;32mif[0m [0marray[0m[0;34m.[0m[0mndim[0m [0;34m==[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 761[0;31m                 raise ValueError(
[0m[1;32m    762[0m                     [0;34m"Expected 2D array, got 1D array instead:\narray={}.\n"[0m[0;34m[0m[0;34m[0m[0m
[1;32m    763[0m                     [0;34m"Reshape your data either using array.reshape(-1, 1) if "[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: Expected 2D array, got 1D array instead:
array=[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.
 1. 1. 1. 1. 1. 1. 1. 1.].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
ValueError: Expected 2D array, got 1D array instead:
array=[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.
 1. 1. 1. 1. 1. 1. 1. 1.].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

